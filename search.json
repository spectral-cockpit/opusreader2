[{"path":"https://spectral-cockpit.github.io/opusreader2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 spectral-cockpit.com Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/articles/opusreader2_introduction.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Reading OPUS binary files from Bruker® spectrometers in R","text":"Spectrometers Bruker® Optics GmbH & Co. save spectra special file format called OPUS. OPUS file linked one aggregated sample measurement, usually obtained using OPUS spectroscopy software. files numbers file extensions, numbers typically increase sequentially sample name, based settings chosen OPUS software. OPUS suite file specification proprietary, implement package using reverse engineering. opusreader2, can extract spectroscopic data directly R, giving full control spectral data workflow. package designed handle binary files Fourier-Transform Infrared (FT-IR) spectrometers Bruker® Optics GmbH. might also work products, Raman spectrometers, cases, additional adjustments may needed support new block types (data parameters; see ).","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/articles/opusreader2_introduction.html","id":"opus-data-extraction","dir":"Articles","previous_headings":"","what":"OPUS data extraction","title":"Reading OPUS binary files from Bruker® spectrometers in R","text":"OPUS file processed first extracting metadata information dedicated part file header. section contains important information binary blocks (also called chunks), byte offsets, sizes, data types different byte locations file. parsing algorithm uses information extract various data parameter blocks byte sequences. picture shows, content files changes based instrument type, data (spectrum) blocks user chooses save, specific measurement settings. addition result spectra, binary files include: comprehensive set measurement parameters (configurations, conditions) single-channel data background measurements performed sample types intermediate spectra Currently, support “data blocks saved” Fourier-transform infrared spectrometers.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/articles/opusreader2_introduction.html","id":"reading-and-parsing-opus-files-in-r","dir":"Articles","previous_headings":"OPUS data extraction","what":"Reading and parsing OPUS files in R","title":"Reading OPUS binary files from Bruker® spectrometers in R","text":"main function, read_opus(), reads one OPUS files returns nested list class list_opusreader2. list contains spectral data metadata file. Let’s see works using example file Bruker ALPHA® spectrometer. instrument measures mid-infrared spectra, using diffuse-reflectance accessory. soil sample measurement shown included package also part data set Baumann et al. (2020). can extract blocks example OPUS file. fact, can access even blocks displayed official OPUS software. dsn argument data source name. can character vector folder paths (read files recursively) specific OPUS file paths. read_opus() returns nested list class \"list_opusreader2\". top level, list structure matches data organized Bruker OPUS viewer. understand block names contents, see help page ?read_opus. Block names use camel_case second level \"opusreader2_list\" output, making easy access programmatically. Printing entire \"opusreader2_list\" can flood console. easier exploration, use RStudio’s list preview View(spectrum_1) examine specific elements names() str(). list elements may visible Bruker® viewer pane, compile either useful actually part files: basic_metadata: Minimal metadata identify measurements, including file name, sample name, timestamps. Useful organizing spectral libraries prediction workflows. ab_no_atm_comp_data_param: Parameters absorbance (AB) block atmospheric compensation. ab_no_atm_comp: Absorbance data atmospheric compensation. types data parameters within OPUS files encoded three capital letters . example, check frequency first point (FXV), use: Besides data parameter values, output parsed OPUS block contains block type, channel type, text type, additional type, offset bytes, next offset bytes, chunk size bytes particular data blocks. decoded file header allows traceability parsing process. example spectrum measured atmospheric compensation (removing masking information carbon dioxide water vapor bands), set OPUS software. OPUS files track processing steps macros, can access raw processed data. enables thorough quality control modeling making predictions new samples.","code":"library(\"opusreader2\") # example file file_1 <- system.file(\"extdata\", \"test_data\", \"BF_lo_01_soil_cal.1\",   package = \"opusreader2\" ) spectrum_1 <- read_opus(dsn = file_1) class(spectrum_1) #> [1] \"list_opusreader2\" \"list\" names(spectrum_1) #> [1] \"BF_lo_01_soil_cal.1\" meas_1 <- spectrum_1[[\"BF_lo_01_soil_cal.1\"]] names(meas_1) #>  [1] \"basic_metadata\"             \"ab_no_atm_comp_data_param\"  #>  [3] \"ab_no_atm_comp\"             \"ab_data_param\"              #>  [5] \"ab\"                         \"sc_sample_data_param\"       #>  [7] \"sc_sample\"                  \"sc_ref_data_param\"          #>  [9] \"sc_ref\"                     \"optics\"                     #> [11] \"optics_ref\"                 \"acquisition_ref\"            #> [13] \"fourier_transformation_ref\" \"fourier_transformation\"     #> [15] \"sample\"                     \"acquisition\"                #> [17] \"instrument_ref\"             \"instrument\"                 #> [19] \"history\" str(meas_1$basic_metadata) #> 'data.frame':    1 obs. of  6 variables: #>  $ dsn_filename        : chr \"BF_lo_01_soil_cal.1\" #>  $ opus_sample_name    : chr \"BF_lo_01_soil_cal\" #>  $ timestamp_string    : chr \"2015-11-06 14:39:33 GMT+1\" #>  $ local_datetime      : chr \"2015-11-06 14:39:33\" #>  $ local_timezone      : chr \"GMT+1\" #>  $ utc_datetime_posixct: POSIXct, format: \"2015-11-06 13:39:33\" meas_1$ab_data_param$parameters$FXV$parameter_value #> [1] 3997.397 class(meas_1$ab_data_param) #> [1] \"parameter\" str(meas_1$ab_data_param) #> List of 9 #>  $ block_type     : int 31 #>  $ channel_type   : int 16 #>  $ text_type      : int 0 #>  $ additional_type: int 0 #>  $ offset         : int 33424 #>  $ next_offset    : int 33600 #>  $ chunk_size     : int 176 #>  $ block_type_name: chr \"ab_data_param\" #>  $ parameters     :List of 10 #>   ..$ DPF:List of 4 #>   .. ..$ parameter_name     : chr \"DPF\" #>   .. ..$ parameter_name_long: chr \"Data Point Format\" #>   .. ..$ parameter_value    : int 1 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ NPT:List of 4 #>   .. ..$ parameter_name     : chr \"NPT\" #>   .. ..$ parameter_name_long: chr \"Number of Data Points\" #>   .. ..$ parameter_value    : int 1716 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ FXV:List of 4 #>   .. ..$ parameter_name     : chr \"FXV\" #>   .. ..$ parameter_name_long: chr \"Frequency of First Point\" #>   .. ..$ parameter_value    : num 3997 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ LXV:List of 4 #>   .. ..$ parameter_name     : chr \"LXV\" #>   .. ..$ parameter_name_long: chr \"Frequency of Last Point\" #>   .. ..$ parameter_value    : num 500 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ CSF:List of 4 #>   .. ..$ parameter_name     : chr \"CSF\" #>   .. ..$ parameter_name_long: chr \"Y - Scaling Factor\" #>   .. ..$ parameter_value    : num 1 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ MXY:List of 4 #>   .. ..$ parameter_name     : chr \"MXY\" #>   .. ..$ parameter_name_long: chr \"Y - Maximum\" #>   .. ..$ parameter_value    : num 1.47 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ MNY:List of 4 #>   .. ..$ parameter_name     : chr \"MNY\" #>   .. ..$ parameter_name_long: chr \"Y - Minimum\" #>   .. ..$ parameter_value    : num 0.104 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ DAT:List of 4 #>   .. ..$ parameter_name     : chr \"DAT\" #>   .. ..$ parameter_name_long: chr \"Date of Measurement\" #>   .. ..$ parameter_value    : chr \"06/11/2015\" #>   .. ..$ parameter_type     : chr \"str\" #>   ..$ TIM:List of 4 #>   .. ..$ parameter_name     : chr \"TIM\" #>   .. ..$ parameter_name_long: chr \"Time of Measurement\" #>   .. ..$ parameter_value    : chr \"14:38:14.100 (GMT+1)\" #>   .. ..$ parameter_type     : chr \"str\" #>   ..$ DXU:List of 4 #>   .. ..$ parameter_name     : chr \"DXU\" #>   .. ..$ parameter_name_long: chr \"X Units\" #>   .. ..$ parameter_value    : chr \"WN\" #>   .. ..$ parameter_type     : chr \"str\" #>  - attr(*, \"class\")= chr \"parameter\" str(meas_1$instrument) #> List of 9 #>  $ block_type     : int 32 #>  $ channel_type   : int 0 #>  $ text_type      : int 0 #>  $ additional_type: int 64 #>  $ offset         : int 26160 #>  $ next_offset    : int 26560 #>  $ chunk_size     : int 400 #>  $ block_type_name: chr \"instrument\" #>  $ parameters     :List of 27 #>   ..$ HFL:List of 4 #>   .. ..$ parameter_name     : chr \"HFL\" #>   .. ..$ parameter_name_long: chr \"Hight Folding Limit\" #>   .. ..$ parameter_value    : num 16707 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ LFL:List of 4 #>   .. ..$ parameter_name     : chr \"LFL\" #>   .. ..$ parameter_name_long: chr \"Low Folding Limit\" #>   .. ..$ parameter_value    : num 0 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ LWN:List of 4 #>   .. ..$ parameter_name     : chr \"LWN\" #>   .. ..$ parameter_name_long: chr \"Laser Wavenumber\" #>   .. ..$ parameter_value    : num 11602 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ ABP:List of 4 #>   .. ..$ parameter_name     : chr \"ABP\" #>   .. ..$ parameter_name_long: chr \"Absolute Peak Pos in Laser*2\" #>   .. ..$ parameter_value    : int 999951 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ SSP:List of 4 #>   .. ..$ parameter_name     : chr \"SSP\" #>   .. ..$ parameter_name_long: chr \"Sample Spacing Divisor\" #>   .. ..$ parameter_value    : int 1 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ HUM:List of 4 #>   .. ..$ parameter_name     : chr \"HUM\" #>   .. ..$ parameter_name_long: chr \"Relative Humidity Interferometer\" #>   .. ..$ parameter_value    : int 25 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ RSN:List of 4 #>   .. ..$ parameter_name     : chr \"RSN\" #>   .. ..$ parameter_name_long: chr \"Running Sample Number\" #>   .. ..$ parameter_value    : int 1891 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ SRT:List of 4 #>   .. ..$ parameter_name     : chr \"SRT\" #>   .. ..$ parameter_name_long: chr \"Start time (sec)\" #>   .. ..$ parameter_value    : num 1.45e+09 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ DUR:List of 4 #>   .. ..$ parameter_name     : chr \"DUR\" #>   .. ..$ parameter_name_long: chr \"Scan time (sec)\" #>   .. ..$ parameter_value    : num 79.6 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ TSC:List of 4 #>   .. ..$ parameter_name     : chr \"TSC\" #>   .. ..$ parameter_name_long: chr \"Scanner Temperature\" #>   .. ..$ parameter_value    : num 33.7 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ MVD:List of 4 #>   .. ..$ parameter_name     : chr \"MVD\" #>   .. ..$ parameter_name_long: chr \"Max. Velocity Deviation\" #>   .. ..$ parameter_value    : num 1.56 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ APG:List of 4 #>   .. ..$ parameter_name     : chr \"APG\" #>   .. ..$ parameter_name_long: chr \"Actual preamplifier gain\" #>   .. ..$ parameter_value    : num 1 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ HUA:List of 4 #>   .. ..$ parameter_name     : chr \"HUA\" #>   .. ..$ parameter_name_long: chr \"Absolute Humidity Interferometer\" #>   .. ..$ parameter_value    : num 9.52 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ VSN:List of 4 #>   .. ..$ parameter_name     : chr \"VSN\" #>   .. ..$ parameter_name_long: chr \"Firmware version\" #>   .. ..$ parameter_value    : chr \"1.352 Dec 04 2012\" #>   .. ..$ parameter_type     : chr \"str\" #>   ..$ SRN:List of 4 #>   .. ..$ parameter_name     : chr \"SRN\" #>   .. ..$ parameter_name_long: chr \"Instrument Serial Number\" #>   .. ..$ parameter_value    : chr \"2 00639\" #>   .. ..$ parameter_type     : chr \"str\" #>   ..$ PKA:List of 4 #>   .. ..$ parameter_name     : chr \"PKA\" #>   .. ..$ parameter_name_long: chr \"Peak Amplitude\" #>   .. ..$ parameter_value    : int -438 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ PKL:List of 4 #>   .. ..$ parameter_name     : chr \"PKL\" #>   .. ..$ parameter_name_long: chr \"Peak Location\" #>   .. ..$ parameter_value    : int 7518 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ GFW:List of 4 #>   .. ..$ parameter_name     : chr \"GFW\" #>   .. ..$ parameter_name_long: chr \"Number of Good FW Scans\" #>   .. ..$ parameter_value    : int 32 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ BFW:List of 4 #>   .. ..$ parameter_name     : chr \"BFW\" #>   .. ..$ parameter_name_long: chr \"Number of Bad FW Scans\" #>   .. ..$ parameter_value    : int 0 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ PRA:List of 4 #>   .. ..$ parameter_name     : chr \"PRA\" #>   .. ..$ parameter_name_long: chr \"Backward Peack Amplitude\" #>   .. ..$ parameter_value    : int -437 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ PRL:List of 4 #>   .. ..$ parameter_name     : chr \"PRL\" #>   .. ..$ parameter_name_long: chr \"Backward Peak Location\" #>   .. ..$ parameter_value    : int 7518 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ GBW:List of 4 #>   .. ..$ parameter_name     : chr \"GBW\" #>   .. ..$ parameter_name_long: chr \"Number of Good BW Scans\" #>   .. ..$ parameter_value    : int 32 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ BBW:List of 4 #>   .. ..$ parameter_name     : chr \"BBW\" #>   .. ..$ parameter_name_long: chr \"Number of Bad BW Scans\" #>   .. ..$ parameter_value    : int 0 #>   .. ..$ parameter_type     : chr \"int\" #>   ..$ INS:List of 4 #>   .. ..$ parameter_name     : chr \"INS\" #>   .. ..$ parameter_name_long: chr \"Instrument Type\" #>   .. ..$ parameter_value    : chr \"Alpha\" #>   .. ..$ parameter_type     : chr \"str\" #>   ..$ FOC:List of 4 #>   .. ..$ parameter_name     : chr \"FOC\" #>   .. ..$ parameter_name_long: chr \"Focal Length\" #>   .. ..$ parameter_value    : num 33 #>   .. ..$ parameter_type     : chr \"float\" #>   ..$ RDY:List of 4 #>   .. ..$ parameter_name     : chr \"RDY\" #>   .. ..$ parameter_name_long: chr \"Ready Check\" #>   .. ..$ parameter_value    : chr \"1\" #>   .. ..$ parameter_type     : chr \"str\" #>   ..$ ASS:List of 4 #>   .. ..$ parameter_name     : chr \"ASS\" #>   .. ..$ parameter_name_long: chr \"Number of Sample Scans\" #>   .. ..$ parameter_value    : int 64 #>   .. ..$ parameter_type     : chr \"int\" #>  - attr(*, \"class\")= chr \"parameter\""},{"path":"https://spectral-cockpit.github.io/opusreader2/articles/opusreader2_introduction.html","id":"reading-opus-files-recursively-from-a-folder","dir":"Articles","previous_headings":"OPUS data extraction","what":"Reading OPUS files recursively from a folder","title":"Reading OPUS binary files from Bruker® spectrometers in R","text":"can also provide folder data source name (dsn). makes easy read OPUS files found within folder subfolders. , demonstrate using test files come {opusreader2} package, also used unit testing. get instrument name test file, can use:","code":"test_dsn <- system.file(\"extdata\", \"test_data\", package = \"opusreader2\") data_test <- read_opus(dsn = test_dsn) names(data_test) #> [1] \"617262_1TP_C-1_A5.0\" \"629266_1TP_A-1_C1.0\" \"BF_lo_01_soil_cal.1\" #> [4] \"MMP_2107_Test1.001\"  \"test_spectra.0\" get_instrument_name <- function(data) {   return(data$instrument$parameters$INS$parameter_value) }  lapply(data_test, get_instrument_name) #> $`617262_1TP_C-1_A5.0` #> [1] \"INVENIO-R\" #>  #> $`629266_1TP_A-1_C1.0` #> [1] \"VERTEX 70\" #>  #> $BF_lo_01_soil_cal.1 #> [1] \"Alpha\" #>  #> $MMP_2107_Test1.001 #> [1] \"Tango\" #>  #> $test_spectra.0 #> [1] \"TENSOR II\""},{"path":"https://spectral-cockpit.github.io/opusreader2/articles/opusreader2_introduction.html","id":"reading-opus-files-in-parallel","dir":"Articles","previous_headings":"OPUS data extraction","what":"Reading OPUS files in parallel","title":"Reading OPUS binary files from Bruker® spectrometers in R","text":"implemented parallel interface read_opus() efficiently read large collections spectra multiple OPUS files. default recommended backend, mirai, orchestrates reading files concurrently using asynchronous parallel mapping individual OPUS files. main advantage faster reads, better also fault-tolerant error handling (.e. custom) actions file read. Behind scene, mirai uses nanonext NNG (Nanomsg Next Gen) messaging, allows high throughput low latency individual R processes. launching daemons. task reading files can done locally distributed systems network. details, check mirai, vignettes.","code":"library(\"mirai\") daemons(n = 2L, dispatcher = TRUE) #> [1] 2"},{"path":"https://spectral-cockpit.github.io/opusreader2/articles/opusreader2_introduction.html","id":"reading-a-single-opus-file","dir":"Articles","previous_headings":"OPUS data extraction","what":"Reading a single OPUS file","title":"Reading OPUS binary files from Bruker® spectrometers in R","text":"individual OPUS files, can use read_opus_single() function. export developer interface.","code":"data_single <- read_opus_single(dsn = file_1)"},{"path":"https://spectral-cockpit.github.io/opusreader2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philipp Baumann. Author, maintainer. Thomas Knecht. Author. Pierre Roudier. Author. spectral-cockpit.com. Copyright holder, funder.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baumann P, Knecht T, Roudier P (2025). opusreader2: Read Spectroscopic Data Bruker OPUS Binary Files. R package version 0.6.3, https://spectral-cockpit.github.io/opusreader2/.","code":"@Manual{,   title = {opusreader2: Read Spectroscopic Data from Bruker OPUS Binary Files},   author = {Philipp Baumann and Thomas Knecht and Pierre Roudier},   year = {2025},   note = {R package version 0.6.3},   url = {https://spectral-cockpit.github.io/opusreader2/}, }"},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"opusreader2","dir":"","previous_headings":"","what":"Read Spectroscopic Data from Bruker OPUS Binary Files","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"Artwork Lilyan Blazoudaki","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"id_-scope","dir":"","previous_headings":"","what":"🪄 Scope","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"“grab ’em ” — Read OPUS binary files Fourier-Transform Infrared (FT-IR) spectrometers company Bruker Optics GmbH & Co. R. package developed free time spectral-cockpit.space. way, 8 arms stand 8 bits oct*.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"id_-highlights-and-disclaimer","dir":"","previous_headings":"","what":"🪩 Highlights and disclaimer","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"Bruker corporation produces reliable instruments; however, official documentation OPUS file format, making proprietary. Fortunately, team colleagues open-source spectroscopy community successfully deciphered . considerable effort, ’ve unraveled file logic (see credits). {opusreader2} stands state---art binary reader, serving robust foundation spectroscopy workflow. Notably modular, imposes hard dependencies beyond base R. Actively contributing spectroscopy communities encouraged feedback, issue reports, pull requests. collective efforts aim enhance support growing array instruments, measurement modes, block types. Additionally, lookout forthcoming diagnostic solutions built upon {opusreader2}. seeking personalized assistance, Spectral-Cockpit offers consulting services tailored every stage spectroscopy workflow. now achieved stability package development. core API opusreader2::read_opus() robust, anticipate significant user-facing design changes. Moving forward, additional functions downstream extend capabilities, allowing users extract specific areas interest, measurement metadata, facilitate reading workflows custom environments. current development efforts expanding support Bruker data blocks even providing useful downstream features metadata spectra management additional helper wrapper functions. adopted semantic versioning {fledge} track changes. stay updated progress history features aligned semantic versioning, please refer NEWS. aim soon release stable version CRAN production-ready. expected time arrival January 2024.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"📦 Installation","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"latest version can installed","code":"# Install the latest version install.packages(\"opusreader2\", repos = c(   spectralcockpit = 'https://spectral-cockpit.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"spectral-cockpit/opusreader2\")"},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"id_-examples","dir":"","previous_headings":"","what":"🔦 Examples","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"recommend start vignette “Reading OPUS binary files Bruker® spectrometers R”. Multiple OPUS files can optionally read parallel using {future} framework. , parallel workers need registered. parallel = TRUE, progress updates via {progressr} optionally available Optionally, number desired chunks can specified via options.","code":"library(\"opusreader2\") # read a single file (one measurement) file <- opus_file() data_list <- read_opus(dsn = file) file <- opus_file() files_1000 <- rep(file, 1000L)  if (!require(\"future\")) install.packages(\"future\") if (!require(\"future.apply\")) install.packages(\"future.apply\")  # register parallel backend (multisession; using sockets) future::plan(future::multisession)  data <- read_opus(dsn = files_1000, parallel = TRUE) if (!require(\"progressr\")) install.packages(\"progressr\") library(\"progressr\")  future::plan(future::multisession)  handlers(global = TRUE) handlers(\"progress\") # base R progress animation  file <- opus_file() files_1000 <- rep(file, 1000L)  # read with progress bar data <- read_opus(dsn = files_1000, parallel = TRUE, progress_bar = TRUE) options(number_of_chunks = 20L) data <- read_opus(dsn = files_1000, parallel = TRUE, progress_bar = TRUE) data <- read_opus_single(dsn = file)"},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"advanced-testing-and-bruker-opus-file-specification","dir":"","previous_headings":"","what":"Advanced testing and Bruker OPUS file specification","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"strive full-fledged reader OPUS files par commercial reader Bruker OPUS software suite. contribute development, provide additional vignette describes OPUS format technical details implementation package.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"like spirit open source development, constructive suggestions questions always welcome. trade consistency quality code drive innovation, following best practices (can indeed improved, many things life). : Code checks (linting), styling, spell checking: use pre-commit framework generic coding R specific hooks configured .pre-commit-config.yaml. Generally, follow tidyverse style guide, slight exceptions. provide auto-fixing PRs possible, rely pre-commit.ci lite. install pre-commit python3. details options, see official documentation enable pre-commit hooks .pre-commit-config.yaml git commit -m \"<-commit-message>\", defined pre-commit hooks automatically applied new commits.","code":"# in terminal pip3 install pre-commit --user # change to cloned git directory of your fork of the package pre-commit install # in your terminal and package root directory pre-commit run --all-files"},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"organizations-and-projects-using-opusreader2","dir":"","previous_headings":"","what":"Organizations and projects using {opusreader2}","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"far know, following organizations projects use package. Please make pull request want listed . CSIRO Open Soil Spectral Library ETH Zürich: Sustainable Agroecosystems group Soil Resources group","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"package major rework {opusreader} made Pierre Roudier Philipp Baumann. {opusreader} works, OPUS files. precessor package relies interesting optimal reverse engineered logic. Particularly, assignment spectral data types (.e., single channel reflectance vs. final result spectrum), buggy CO2 peak ratio used heuristic. Also, byte offsets three letter strings directly used read specific data assign block types. 100% robust causes read failures edge cases. new package parses file header assigning spectral blocks.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Read Spectroscopic Data from Bruker OPUS Binary Files","text":"Pierre Roudier Philipp Baumann made improved R reader, developing version simplerspec Philipp. https://github.com/pierreroudier/opusreader QED.ai: implemented python parser takes main logic ono. https://github.com/qedsoftware/brukeropusreader twagner: wrote OPUS FTIR clone called ono. Original decrypter header. https://pypi.org/project/ono/ Andrew Sila Tomislav Hengl: wrote first OPUS reader R. https://github.com/cran/soil.spec/blob/master/R/read.opus.R","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/calc_chunk_size.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate the full chunk size — calc_chunk_size","title":"calculate the full chunk size — calc_chunk_size","text":"calculate full chunk size","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/calc_chunk_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate the full chunk size — calc_chunk_size","text":"","code":"calc_chunk_size(ds)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/calc_chunk_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate the full chunk size — calc_chunk_size","text":"ds dataset","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/calc_parameter_chunk_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the parameter chunk size in bytes — calc_parameter_chunk_size","title":"Calculate the parameter chunk size in bytes — calc_parameter_chunk_size","text":"Calculate parameter chunk size bytes","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/calc_parameter_chunk_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the parameter chunk size in bytes — calc_parameter_chunk_size","text":"","code":"calc_parameter_chunk_size(ds)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/calc_parameter_chunk_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the parameter chunk size in bytes — calc_parameter_chunk_size","text":"ds data set one classes \"parameter\", \"text\" \"data\"","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/calc_parameter_chunk_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the parameter chunk size in bytes — calc_parameter_chunk_size","text":"Number bytes length 1 numeric vector","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/create_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"assign the classes to the dataset list — create_dataset","title":"assign the classes to the dataset list — create_dataset","text":"assign classes dataset list","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/create_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assign the classes to the dataset list — create_dataset","text":"","code":"create_dataset(header_data)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/create_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assign the classes to the dataset list — create_dataset","text":"header_data list header information block","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_dsn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get File Paths of Sample OPUS Files Included in the Package — opus_test_dsn","title":"Get File Paths of Sample OPUS Files Included in the Package — opus_test_dsn","text":"Utility function retrieves location sample OPUS binary file disk.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_dsn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get File Paths of Sample OPUS Files Included in the Package — opus_test_dsn","text":"","code":"opus_test_dsn()"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_dsn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get File Paths of Sample OPUS Files Included in the Package — opus_test_dsn","text":"character vector paths OPUS files included package","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_dsn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get File Paths of Sample OPUS Files Included in the Package — opus_test_dsn","text":"","code":"(dsn <- opus_test_dsn) #> function ()  #> { #>     system.file(\"extdata\", \"test_data\", package = \"opusreader2\") #> } #> <bytecode: 0x10c5b43b0> #> <environment: namespace:opusreader2>"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path of a Selected Sample OPUS File Included in the Package — opus_test_file","title":"Get path of a Selected Sample OPUS File Included in the Package — opus_test_file","text":"Utility function retrieves location sample OPUS binary file disk.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path of a Selected Sample OPUS File Included in the Package — opus_test_file","text":"","code":"opus_test_file()"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path of a Selected Sample OPUS File Included in the Package — opus_test_file","text":"character vector path selected single sample OPUS file","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/opus_test_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path of a Selected Sample OPUS File Included in the Package — opus_test_file","text":"","code":"(fn <- opus_test_file()) #> [1] \"/private/var/folders/hn/k7g0_sh57112t0xtjxcjcm5r0000gn/T/Rtmp4rlpxm/temp_libpath1a4731a32e79/opusreader2/extdata/test_data/test_spectra.0\""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.data.html","id":null,"dir":"Reference","previous_headings":"","what":"read chunk method for data — parse_chunk.data","title":"read chunk method for data — parse_chunk.data","text":"read chunk method data","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read chunk method for data — parse_chunk.data","text":"","code":"# S3 method for class 'data' parse_chunk(ds, raw)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read chunk method for data — parse_chunk.data","text":"ds chunk dataset raw raw vector","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.default.html","id":null,"dir":"Reference","previous_headings":"","what":"read chunk method for default — parse_chunk.default","title":"read chunk method for default — parse_chunk.default","text":"read chunk method default","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read chunk method for default — parse_chunk.default","text":"","code":"# Default S3 method parse_chunk(ds, raw)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read chunk method for default — parse_chunk.default","text":"ds chunk dataset raw raw vector","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"read chunk method — parse_chunk","title":"read chunk method — parse_chunk","text":"read chunk method","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read chunk method — parse_chunk","text":"","code":"parse_chunk(ds, raw)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read chunk method — parse_chunk","text":"ds chunk dataset raw raw vector","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"read chunk method for parameter — parse_chunk.parameter","title":"read chunk method for parameter — parse_chunk.parameter","text":"read chunk method parameter","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read chunk method for parameter — parse_chunk.parameter","text":"","code":"# S3 method for class 'parameter' parse_chunk(ds, raw)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read chunk method for parameter — parse_chunk.parameter","text":"ds chunk dataset raw raw vector","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.text.html","id":null,"dir":"Reference","previous_headings":"","what":"read chunk method for text — parse_chunk.text","title":"read chunk method for text — parse_chunk.text","text":"read chunk method text","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read chunk method for text — parse_chunk.text","text":"","code":"# S3 method for class 'text' parse_chunk(ds, raw)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_chunk.text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read chunk method for text — parse_chunk.text","text":"ds chunk dataset raw raw vector","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_header.html","id":null,"dir":"Reference","previous_headings":"","what":"parse the header of the opus file — parse_header","title":"parse the header of the opus file — parse_header","text":"parse header opus file","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse the header of the opus file — parse_header","text":"","code":"parse_header(raw)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse the header of the opus file — parse_header","text":"raw raw vector opus binary file","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_opus.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse data, parameters and text from raw vector of OPUS file saved after one spectral measurement of a Bruker FT-IR device. — parse_opus","title":"Parse data, parameters and text from raw vector of OPUS file saved after one spectral measurement of a Bruker FT-IR device. — parse_opus","text":"function internally used parse raw vector OPUS file reading read_opus_raw().","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_opus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse data, parameters and text from raw vector of OPUS file saved after one spectral measurement of a Bruker FT-IR device. — parse_opus","text":"","code":"parse_opus(raw, data_only)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_opus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse data, parameters and text from raw vector of OPUS file saved after one spectral measurement of a Bruker FT-IR device. — parse_opus","text":"raw vector containing bytes (class \"raw\"). data_only logical (default FALSE). Parse return spectral data elements available blocks. See value returned.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/parse_opus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse data, parameters and text from raw vector of OPUS file saved after one spectral measurement of a Bruker FT-IR device. — parse_opus","text":"Nested list (S3 object) containing parsed contents binary encoded blocks OPUS file. first level names list correspond display names shown Bruker OPUS viewer software. However, snake_case standardized naming allow better output handling. parsed block element sublist containing ) binary read instructions decoded/derived header ($block_type, $channel_type, $text_type $additional_type, $offset (bytes), $next_offset (bytes), $chunk_size (bytes)); b) parameter block, nested list specific parameters $parameters, elements named according capitalized Bruker-internal \"three-letter-string\" definitions (e.g., \"DPF := Data Point Format\"). Possible first-level block names information provided include: refl_no_atm_comp_data_param : class \"parameter\" (viewer: \"Data Parameters Refl\". Parameter list metadata refl data block (refl). refl_no_atm_comp: class \"data\" (spectrum; viewer: \"Refl\"). Unprocessed (raw; .e, atmospherically compensated) reflectance spectra (:= sc_sample / sc_ref). Note element untreated spectra eventual \"atmospheric compensation\" routine applied. refl_data_param : class \"parameter\" (viewer: \"Data Parameters Refl\"). Parameter list metadata refl data block (metadata reflectance spectrum; see refl output). Note element results \"atmospheric compensation\" activated OPUS measurement settings. refl: class \"data\" (spectrum; viewer: \"Refl\"). Atmospherically compensated reflectance spectra (:= sc_sample_corr / sc_ref_corr). result spectrum exists either correction CO2 /water vapour bands set OPUS setting (proprietary algorithm; possibly reverse engineered). refl exists, always corresponding untreated refl_no_atm_comp spectrum  (latter present file shown OPUS viewer, (final) ab displayed) quant_report_refl: class \"parameter\" (viewer: \"Quant Report Refl\"). Quantification report tools multivariate calibration refl data (.e., PLS regression) offered QUANT2 OPUS package. Nested list Bruker-internal \"three-letter-string\" definitions. \"TIT\" title nested quantification table, \"E<digit>[2]\" stands probably entry, \"F<digit>[2]\" field, \"Z<digit>[2]\" yet know maps . seems information needed, can get expanding header parsing algorithm. ab_no_atm_comp_data_param : class \"parameter\" (viewer: \"Data Parameters AB\"). Parameter list metadata ab data block (spectrum; see ab output). ab_no_atm_comp: class \"data\" (spectrum; viewer: \"Refl\"). Unprocessed (raw; .e, atmospherically compensated) reflectance spectra (:= sc_sample/ sc_ref). ab_data_param : class \"parameter\" (viewer: \"Data Parameters Refl\"). Parameter list metadata ab data block (spectrum; see ab). Note element results \"atmospheric compensation\" activated OPUS measurement settings. ab: class \"data\" (spectrum; viewer: \"AB\"). Atmospherically compensated (apparent) absorbance spectra (:= log(1 / (sc_sample_corr / sc_ref_corr)). exists either correction CO2 /water vapour bands set OPUS setting (proprietary algorithm; possibly reverse engineered). AB exists, always corresponding untreated ab_no_atm_comp spectrum (latter present file shown OPUS viewer, final ab displayed). quant_report_ab: class \"parameter\" (viewer: \"Quant Report AB\"). Quantification report tools multivariate calibration ab data (.e., PLS regression) offered QUANT2 OPUS package. Nested list Bruker-internal \"three-letter-string\" definitions. \"TIT\" title nested quantification table, \"E<digit>[2]\" stands probably entry, \"F<digit>[2]\" field, \"Z<digit>[2]\" yet know maps . seems information needed, can get expanding header parsing algorithm. sc_sample_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters ScSm\"). Describes sc_sample data block (see sc_sample). sc_sample: class \"data\" (spectrum). Single channel (sc) spectrum sample (y-axis: intensity). ig_sample_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters IgSm\"). ig_sample: class \"data\" (signal, viewer: \"IgSm\"). Interferogram sample measurement. Oscillatory signal (x-axis: optical path difference (OPD); y-axis: amplitude signal). sc_ref_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters ScRf\"). Describes sc_sample data block (see sc_ref). sc_ref: class \"data\" (spectrum; viewer: \"Data Parameters IgSm\"). Single channel (sc) spectrum reference (background material: e.g., gold; y-axis: intensity). ig_ref_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters IgRf\"). ig_ref: class \"data\" (spectrum; viewer: \"IgRf\"). Interferogram reference measurement. (background material: e.g., gold). Oscillatory signal (x-axis: optical path difference (OPD); y-axis: amplitude signal) optics: class \"parameter (metadata; viewer: \"Optic Parameters\"). Optic setup settings \"Accessory\", \"Detector Setting\" \"Source Setting\". optics_ref: class \"parameter (metadata; viewer: \"Optic Parameters Rf\"). Optic setup settings specific reference measurement \"Accessory\", \"Detector Setting\" \"Source Setting\". acquisition_ref: class \"parameter\" (metadata; viewer: \"Acquisition parameters Rf\". Settings \"\"Additional Data Treatment\", (number) \"Background Scans\" \"Result Spectrum\" (e.g. value \"Absorbance\"). fourier_transformation_ref: fourier_transformation: class \"parameter\" sample: acquisition: instrument_ref: instrument: lab_and_process_param_1: lab_and_process_param_2: info_block: history:","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_character.html","id":null,"dir":"Reference","previous_headings":"","what":"read character from binary — read_character","title":"read character from binary — read_character","text":"read character binary","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read character from binary — read_character","text":"","code":"read_character(raw, cursor, n = 1L, n_char, encoding = \"latin1\")"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read character from binary — read_character","text":"raw raw vector cursor offset n number elements n_char integer number desired characters read raw encoding encoding assign character strings read. Default \"latin1\"., use Windows Latin 1 (ANSI) encoding. Bruker software OPUS assumed commonly store strings.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_double.html","id":null,"dir":"Reference","previous_headings":"","what":"read double from binary (double-precision, 64 bits) — read_double","title":"read double from binary (double-precision, 64 bits) — read_double","text":"read double binary (double-precision, 64 bits)","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_double.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read double from binary (double-precision, 64 bits) — read_double","text":"","code":"read_double(raw, cursor, n = 1L)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_double.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read double from binary (double-precision, 64 bits) — read_double","text":"raw raw vector cursor offset n number elements","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_float.html","id":null,"dir":"Reference","previous_headings":"","what":"read float from binary (single-precision, 32 bits) — read_float","title":"read float from binary (single-precision, 32 bits) — read_float","text":"read float binary (single-precision, 32 bits)","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_float.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read float from binary (single-precision, 32 bits) — read_float","text":"","code":"read_float(raw, cursor, n = 1L)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_float.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read float from binary (single-precision, 32 bits) — read_float","text":"raw raw vector cursor offset n number elements","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus.html","id":null,"dir":"Reference","previous_headings":"","what":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","title":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","text":"function can used read parse OPUS files, make usable processing steps.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","text":"","code":"read_opus(   dsn,   data_only = FALSE,   parallel = FALSE,   .parallel_backend = c(\"mirai\", \"future\"),   progress_bar = FALSE )"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","text":"dsn data source name. Can path specific file path directory. listing files directory recursive. data_only read data parameters FALSE per default, read data NULL, returns parsed data -memory R object. parallel read files parallel via chunking. Default FALSE. .parallel_backend string backend handles reading spectra parallel. Currently, \"mirai\" (default, non-blocking parallel map) \"future\" supported. See section \"Details\" information. progress_bar print progress bar. Default FALSE.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","text":"Nested list (S3 object) containing parsed contents binary encoded blocks OPUS file. first level names list correspond display names shown Bruker OPUS viewer software. However, snake_case standardized naming allow better output handling. parsed block element sublist containing ) binary read instructions decoded/derived header ($block_type, $channel_type, $text_type $additional_type, $offset (bytes), $next_offset (bytes), $chunk_size (bytes)); b) parameter block, nested list specific parameters $parameters, elements named according capitalized Bruker-internal \"three-letter-string\" definitions (e.g., \"DPF := Data Point Format\"). Possible first-level block names information provided include: refl_no_atm_comp_data_param : class \"parameter\" (viewer: \"Data Parameters Refl\". Parameter list metadata refl data block (refl). refl_no_atm_comp: class \"data\" (spectrum; viewer: \"Refl\"). Unprocessed (raw; .e, atmospherically compensated) reflectance spectra (:= sc_sample / sc_ref). Note element untreated spectra eventual \"atmospheric compensation\" routine applied. refl_data_param : class \"parameter\" (viewer: \"Data Parameters Refl\"). Parameter list metadata refl data block (metadata reflectance spectrum; see refl output). Note element results \"atmospheric compensation\" activated OPUS measurement settings. refl: class \"data\" (spectrum; viewer: \"Refl\"). Atmospherically compensated reflectance spectra (:= sc_sample_corr / sc_ref_corr). result spectrum exists either correction CO2 /water vapour bands set OPUS setting (proprietary algorithm; possibly reverse engineered). refl exists, always corresponding untreated refl_no_atm_comp spectrum  (latter present file shown OPUS viewer, (final) ab displayed) quant_report_refl: class \"parameter\" (viewer: \"Quant Report Refl\"). Quantification report tools multivariate calibration refl data (.e., PLS regression) offered QUANT2 OPUS package. Nested list Bruker-internal \"three-letter-string\" definitions. \"TIT\" title nested quantification table, \"E<digit>[2]\" stands probably entry, \"F<digit>[2]\" field, \"Z<digit>[2]\" yet know maps . seems information needed, can get expanding header parsing algorithm. ab_no_atm_comp_data_param : class \"parameter\" (viewer: \"Data Parameters AB\"). Parameter list metadata ab data block (spectrum; see ab output). ab_no_atm_comp: class \"data\" (spectrum; viewer: \"Refl\"). Unprocessed (raw; .e, atmospherically compensated) reflectance spectra (:= sc_sample/ sc_ref). ab_data_param : class \"parameter\" (viewer: \"Data Parameters Refl\"). Parameter list metadata ab data block (spectrum; see ab). Note element results \"atmospheric compensation\" activated OPUS measurement settings. ab: class \"data\" (spectrum; viewer: \"AB\"). Atmospherically compensated (apparent) absorbance spectra (:= log10(1 / (sc_sample_corr / sc_ref_corr)). exists either correction CO2 /water vapour bands set OPUS setting (proprietary algorithm; possibly reverse engineered). AB exists, always corresponding untreated ab_no_atm_comp spectrum (latter present file shown OPUS viewer, final ab displayed). quant_report_ab: class \"parameter\" (viewer: \"Quant Report AB\"). Quantification report tools multivariate calibration ab data (.e., PLS regression) offered QUANT2 OPUS package. Nested list Bruker-internal \"three-letter-string\" definitions. \"TIT\" title nested quantification table, \"E<digit>[2]\" stands probably entry, \"F<digit>[2]\" field, \"Z<digit>[2]\" yet know maps . seems information needed, can get expanding header parsing algorithm. sc_sample_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters ScSm\"). Describes sc_sample data block (see sc_sample). sc_sample: class \"data\" (spectrum). Single channel (sc) spectrum sample (y-axis: intensity). ig_sample_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters IgSm\"). ig_sample: class \"data\" (signal, viewer: \"IgSm\"). Interferogram sample measurement. Oscillatory signal (x-axis: optical path difference (OPD); y-axis: amplitude signal). sc_ref_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters ScRf\"). Describes sc_sample data block (see sc_ref). sc_ref: class \"data\" (spectrum; viewer: \"Data Parameters IgSm\"). Single channel (sc) spectrum reference (background material: e.g., gold; y-axis: intensity). ig_ref_data_param: class \"parameter\" (metadata; viewer: \"Data Parameters IgRf\"). ig_ref: class \"data\" (spectrum; viewer: \"IgRf\"). Interferogram reference measurement. (background material: e.g., gold). Oscillatory signal (x-axis: optical path difference (OPD); y-axis: amplitude signal) optics: class \"parameter (metadata; viewer: \"Optic Parameters\"). Optic setup settings \"Accessory\", \"Detector Setting\" \"Source Setting\". optics_ref: class \"parameter (metadata; viewer: \"Optic Parameters Rf\"). Optic setup settings specific reference measurement \"Accessory\", \"Detector Setting\" \"Source Setting\". acquisition_ref: class \"parameter\" (metadata; viewer: \"Acquisition parameters Rf\". Settings \"\"Additional Data Treatment\", (number) \"Background Scans\" \"Result Spectrum\" (e.g. value \"Absorbance\"). fourier_transformation_ref: fourier_transformation: class \"parameter\" sample: acquisition: instrument_ref: instrument: lab_and_process_param_1: lab_and_process_param_2: info_block: history: unknown: block-type can matched, parsing done empty list entry returned. gives hint block can yet parsed. can take steps opening issue.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","text":"read_opus() high-level interface read multiple OPUS files data source name (dsn). optionally supports parallel reads via {mirai} (default) {future} backend. reading parallel, progress bar can enabled. .parallel_backend = \"multisession\", {cli} provides progress updates. .parallel_backend = \"future\", {progressr} required progress updates.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus.html","id":"-mirai-backend","dir":"Reference","previous_headings":"","what":"\"mirai\" backend","title":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","text":"mirai provides highly efficient asynchronous parallel evaluation framework via Nanomsg Next Gen (NNG), high-perforamcne, lightweight messaging library distributed concurrent applications. thing","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus.html","id":"-future-backend","dir":"Reference","previous_headings":"","what":"\"future\" backend","title":"Read OPUS binary files produced by a Bruker spectrometer — read_opus","text":"parallel = TRUE, one can specify across many chunks OPUS files distributed onto registered parallel workers. can done via options(number_of_chunks = <integer>). default value number_of_chunks = \"registered workers\", split OPUS files across number chunks corresponding number registered workers.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the raw vector of an opus data source — read_opus_raw","title":"Read the raw vector of an opus data source — read_opus_raw","text":"Read raw vector opus data source","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the raw vector of an opus data source — read_opus_raw","text":"","code":"read_opus_raw(dsn)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the raw vector of an opus data source — read_opus_raw","text":"dsn source path opus file","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the raw vector of an opus data source — read_opus_raw","text":"list raw vectors","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a single OPUS file — read_opus_single","title":"Read a single OPUS file — read_opus_single","text":"Read single OPUS file","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a single OPUS file — read_opus_single","text":"","code":"read_opus_single(dsn, data_only = FALSE)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_opus_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a single OPUS file — read_opus_single","text":"dsn source path opus file data_only read data parameters FALSE per default, read data","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_raw.file.html","id":null,"dir":"Reference","previous_headings":"","what":"method to open the connection for an opus file — read_raw.file","title":"method to open the connection for an opus file — read_raw.file","text":"method open connection opus file","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_raw.file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"method to open the connection for an opus file — read_raw.file","text":"","code":"# S3 method for class 'file' read_raw(dsn)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_raw.file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"method to open the connection for an opus file — read_raw.file","text":"dsn source path opus file","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispatch method for the open_connection — read_raw","title":"Dispatch method for the open_connection — read_raw","text":"Dispatch method open_connection","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispatch method for the open_connection — read_raw","text":"","code":"read_raw(dsn)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispatch method for the open_connection — read_raw","text":"dsn source path opus file","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_signed_int.html","id":null,"dir":"Reference","previous_headings":"","what":"read signed integer from binary — read_signed_int","title":"read signed integer from binary — read_signed_int","text":"read signed integer binary","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_signed_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read signed integer from binary — read_signed_int","text":"","code":"read_signed_int(raw, cursor, n = 1L)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_signed_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read signed integer from binary — read_signed_int","text":"raw raw vector cursor offset n number elements","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_unsigned_int.html","id":null,"dir":"Reference","previous_headings":"","what":"read unsigned integer from binary — read_unsigned_int","title":"read unsigned integer from binary — read_unsigned_int","text":"read unsigned integer binary","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_unsigned_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read unsigned integer from binary — read_unsigned_int","text":"","code":"read_unsigned_int(raw, cursor, n = 1L)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/read_unsigned_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read unsigned integer from binary — read_unsigned_int","text":"raw raw vector cursor offset n number elements","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/set_connection_class.html","id":null,"dir":"Reference","previous_headings":"","what":"define class of dsn — set_connection_class","title":"define class of dsn — set_connection_class","text":"define class dsn","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/set_connection_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"define class of dsn — set_connection_class","text":"","code":"set_connection_class(dsn)"},{"path":"https://spectral-cockpit.github.io/opusreader2/reference/set_connection_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"define class of dsn — set_connection_class","text":"dsn source path opus file","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"bug-fixes-0-6-3","dir":"Changelog","previous_headings":"","what":"Bug fixes.","title":"opusreader2 0.6.3 (2024-03-12)","text":"fix sample time metadata parsing read_opus(dsn, data_only = TRUE). Previously, extraction timestamp failed data extracted errored case, required \"history\" \"sample\" blocks weren’t extracted temporarily , required. Now, read_opus(dsn, data_only = TRUE) successfully extracts extra element basic_metadata, data_only = FALSE (default). extra information unlikely break existing pipeline code extracts spectra {opusreader2}, nested list element. patch release also resolves warning parsing time information, due extra tab (\"\\t\") present history text specific files. Thanks @mtalluto fix. Added extra tests check errors warnings example files data_only = FALSE data_only = TRUE). Thanks @dylanbeaudette @esteveze reporting failing extraction metadata. Issue report: #104. PR fixed: #105.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-0629000-2023-12-27","dir":"Changelog","previous_headings":"","what":"opusreader2 0.6.2.9000 (2023-12-27)","title":"opusreader2 0.6.2.9000 (2023-12-27)","text":"Select 5 OPUS binary files different instrument types tests vignette ((#103) Update first part vignette CRAN (#103).","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"bug-fixes-0-6-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"opusreader2 0.6.2 (2023-12-23)","text":"Hotfix commit c8ff2cd, accidentally caused regression, leading issues #101 #102. unnoticed diagnosed {testthat} tests place. also update {tic} template, invoke tests yet continous integration (CI) run (passed unconfigured tests). restricting relevant export, roxygen2 @export tags removed @internal added calc_parameter_chunk_size(), made functions unavailable even internally (\"Error UseMethod(\"calc_parameter_chunk_size\") : applicable   method 'calc_parameter_chunk_size' applied object class \"parameter\")\"","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"documentation-0-6-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"opusreader2 0.6.2 (2023-12-23)","text":"read_opus(): return element ab, state Log10 explicitly calculating apparent absorbance (#94; @zecoljls). core: read_opus(), read_opus_single() S3 methods calc_parameter_chunk_size() helpers: opus_file()","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opus-data-support-0-6-1","dir":"Changelog","previous_headings":"","what":"OPUS data support","title":"opusreader2 0.6.1 (2023-11-12)","text":"Support quality test report (#81). block can found ./inst/extdata/new_data/issue81_A1.1.0. read_opus() returns block \"quality_test_report\" list output.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-060-2023-11-12","dir":"Changelog","previous_headings":"","what":"opusreader2 0.6.0 (2023-11-12)","title":"opusreader2 0.6.0 (2023-11-12)","text":"Add first unit tests using {testhat} framework. Allow non-parsable blocks. Add new default blocks yet mapped showing warnings instead error. blocks named \"unknown\" elements output read_opus() list.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opus-data-support-0-6-0","dir":"Changelog","previous_headings":"","what":"OPUS data support","title":"opusreader2 0.6.0 (2023-11-12)","text":"./inst/extdata/new_data/issue94_RT_01_1_23-02-21_13-23-54.0: Bruker 2023 Alpha II mid-IR spectrometer. Due internal refactoring header parsing (see ) (#94) ./inst/extdata/new_data/issue82_Opus_test: Bruker MPA FT-IR spectrometer. Parse block \"b0-c0-t144-a1\", text type 144 special offset parse_chunk.parameter(). now classify block block type \"report_unknown\" (waiting finalize naming confirmed screenshots Bruker OPUS sofware). Also fix time_saved relying language settings (#82)","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"internal-refactoring-0-6-0","dir":"Changelog","previous_headings":"","what":"Internal refactoring","title":"opusreader2 0.6.0 (2023-11-12)","text":"Simplify header parsing parse_header(). Work raw vectors instead connection objects read binary data. Parse raw vectors directly functions read_bin_types() use subsetting slice raw vectors base::readBin() calls instead instead seek(), used previously reposition cursors raw connections. get_meta_timestamp(): omit language dependent logic using \"time saved\" regular expressions matching time saved history block. first time sorted POSIXct candidates returned time saved.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-0509000-2023-06-05","dir":"Changelog","previous_headings":"","what":"opusreader2 0.5.0.9000 (2023-06-05)","title":"opusreader2 0.5.0.9000 (2023-06-05)","text":"implement basic_metadata list element “opusreader2” class containing key metadata (#85)","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-050-2023-06-03","dir":"Changelog","previous_headings":"","what":"opusreader2 0.5.0 (2023-06-03)","title":"opusreader2 0.5.0 (2023-06-03)","text":"Name first level list (class \"list_opusreader2\") base file name given data source name (DSN) (#83) Fix \"list_opusreader2\" indenting reading files parallel (#80) Add support progress bars read_opus() (#75) Introduce type-stable classes read_opus() read_opus_single() output (#72): classes “list_opusreader2” “opusreader2”","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-041-2023-03-19","dir":"Changelog","previous_headings":"","what":"opusreader2 0.4.1 (2023-03-19)","title":"opusreader2 0.4.1 (2023-03-19)","text":"patch read_opus(..., parallel = TRUE): unlist resulting list one level (chunk level); #80.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-040-2023-03-14","dir":"Changelog","previous_headings":"","what":"opusreader2 0.4.0 (2023-03-14)","title":"opusreader2 0.4.0 (2023-03-14)","text":"Feature progress bar read_opus() reading multiple files parallel #75.","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-030-2023-02-16","dir":"Changelog","previous_headings":"","what":"opusreader2 0.3.0 (2023-02-16)","title":"opusreader2 0.3.0 (2023-02-16)","text":"read_opus(): Read one OPUS files data source name (dsn) read_opus_single(): Read single OPUS file calc_parameter_chunk_size(): Calculate parameter chunk size bytes","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-020-2023-02-15","dir":"Changelog","previous_headings":"","what":"opusreader2 0.2.0 (2023-02-15)","title":"opusreader2 0.2.0 (2023-02-15)","text":"read_opus(): S3 class c(\"list_opusreader2\", \"list\") read_opus_single(): S3 class c(\"opusreader2\", \"list\")","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"refactoring-0-1-0","dir":"Changelog","previous_headings":"","what":"Refactoring","title":"opusreader2 0.1.0 (2023-02-08)","text":"Internal refactoring (R/create_dataset.R). Implement new key-value mapping logic assigning integer coded header information. new order (composite) key strings follows sequence block, channel, text additional type information. better line--line layout composite keys mapped information types simplifies detection new kind spectral data parameters encoded header entries (#60). Introduce consistent proactive error reporting composite key yet mapped yet known (R/create_dataset.R). error message includes recipe report new OPUS files yet unsupported block types (.e. new instrument features) {opusreader2}. Together composite key generated respective header entry, step--step reporting GitHub issue proposed. (#60)","code":""},{"path":[]},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"documentation-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Documentation","title":"opusreader2 0.0.0.9002 (2022-12-23)","text":"Update return value parsed OPUS spectral blocks parse_opus()","code":""},{"path":"https://spectral-cockpit.github.io/opusreader2/news/index.html","id":"opusreader2-0009001-2022-12-18","dir":"Changelog","previous_headings":"","what":"opusreader2 0.0.0.9001 (2022-12-18)","title":"opusreader2 0.0.0.9001 (2022-12-18)","text":"Start versioning {fledge}. spectral-cockpit.com proudly introduces {opusreader2} read binary files FT-IR devices Bruker Optics GmbH & Co R. powerhouse fuels speedy extract-transform-load (ETL) data pipelines spectroscopy applications. can continue using state---art commercial devices good : measurements. Meanwhile, can rely open source technology trans-disciplinary knowledge design data processes, make best use spectroscopic source information. {opusreader2} parses decodes first glance puzzling file header first. implementation uses mapped information recipe read particular data types different blocks. Specific byte chunks interpreted defined position (offset), read length, bytes per element, type (e.g., string, float). , data can read parsed. mitigate lock-file level. Hence foster reproducible trustworthy processes spectral workflows. Nowadays, new business logic transparent code, methods used services offered. Tightly link make input data, metadata outcomes available economical scaling-diagnostics. Extract, transform load data directly OPUS binary files Providing data metadata measurements connects downstream tasks order make IR spectroscopy ready-made, automatec diagnostics monitoring (platform): Quality control measurements; monitoring workflow metadata Continuous spectroscopic diagnostics (data processing, model development, inspection, adaption, prediction, validation). Use MLOps principles. package can directly read parse binary files without compromising single bit precious information saved filled OPUS binary files. read_opus() main function exposed reads parses OPUS binary files various data sources names (dsn). Currently, support following dsn types: files(s): character vector one path OPUS file multiple paths individual OPUS files folder: character length 1 path folder OPUS files read recursively. reads OPUS files .<integer> extension (Usually starting .0 unique sample names per measurement. File names OPUS files can possibly include plate positions postfixed sample names. option OPUSLab. Kindly note associated metadata (sample name/ID) plate position also stored internally file name changes measurement tracked. read_opus offers four arguments: dsn: data source name data_only: switch extract spectral data blocks without additional information like measurement parameters environmental conditions. parallel: enabled default. Speed reads 1000s files chunking list files across parallel workers. Cross-platform via unified {future} framework R. progress_bar: optionally show interactive progress bar single-threaded asynchronous reads. interface minimal job generic reader function well defined design. make maintenance easy avoid breaking changes future releases package. importantly avoid feature overload like . plan release specific helper wrapper functions can come handy tailored uses diagnostic environments. may also extract post-process spectroscopic data metadata pipelines. Check soon future releases.","code":""}]
